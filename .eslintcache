[{"D:\\Work\\elemart-storage\\src\\index.tsx":"1","D:\\Work\\elemart-storage\\src\\reportWebVitals.ts":"2","D:\\Work\\elemart-storage\\src\\App.tsx":"3","D:\\Work\\elemart-storage\\src\\Pages.tsx":"4","D:\\Work\\elemart-storage\\src\\pages\\LoginPage\\LoginPage.tsx":"5","D:\\Work\\elemart-storage\\src\\components\\SideMenu\\SideMenu.tsx":"6","D:\\Work\\elemart-storage\\src\\pages\\CustomerPage\\CustomerPage.tsx":"7","D:\\Work\\elemart-storage\\src\\pages\\ProductPage\\ProductPage.tsx":"8","D:\\Work\\elemart-storage\\src\\api\\CustomerApi.ts":"9","D:\\Work\\elemart-storage\\src\\config.ts":"10","D:\\Work\\elemart-storage\\src\\services\\CustomerService.ts":"11","D:\\Work\\elemart-storage\\src\\components\\CustomModal\\CustomModal.tsx":"12","D:\\Work\\elemart-storage\\src\\components\\CustomerForm\\CustomerForm.tsx":"13","D:\\Work\\elemart-storage\\src\\pages\\PaidInvoicePage\\PaidInvoicePage.tsx":"14","D:\\Work\\elemart-storage\\src\\pages\\ReceivedPage\\ReceivedInvoicePage.tsx":"15","D:\\Work\\elemart-storage\\src\\api\\PaidApi.ts":"16","D:\\Work\\elemart-storage\\src\\components\\PaidInvoiceForm\\PaidInvoiceForm.tsx":"17","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableCell.tsx":"18","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableTable.tsx":"19","D:\\Work\\elemart-storage\\src\\api\\ReceivedApi.ts":"20","D:\\Work\\elemart-storage\\src\\mocks\\ProductMocks.ts":"21","D:\\Work\\elemart-storage\\src\\api\\ProductApi.ts":"22","D:\\Work\\elemart-storage\\src\\components\\PaidInfo\\PaidInfo.tsx":"23","D:\\Work\\elemart-storage\\src\\mocks\\ColumnMocks.ts":"24","D:\\Work\\elemart-storage\\src\\components\\ReceivedInfo\\ReceivedInfo.tsx":"25","D:\\Work\\elemart-storage\\src\\components\\ReceivedInvoiceForm\\ReceivedInvoiceForm.tsx":"26","D:\\Work\\elemart-storage\\src\\components\\ProductInfo\\ProductInfo.tsx":"27","D:\\Work\\elemart-storage\\src\\components\\ProductForm\\ProductForm.tsx":"28"},{"size":531,"mtime":1606893739497,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1175,"mtime":1607345684786,"results":"32","hashOfConfig":"30"},{"size":1592,"mtime":1607433996569,"results":"33","hashOfConfig":"30"},{"size":2555,"mtime":1606814909770,"results":"34","hashOfConfig":"30"},{"size":1445,"mtime":1607418335710,"results":"35","hashOfConfig":"30"},{"size":2524,"mtime":1607432413805,"results":"36","hashOfConfig":"30"},{"size":2531,"mtime":1607494118830,"results":"37","hashOfConfig":"30"},{"size":986,"mtime":1607405150853,"results":"38","hashOfConfig":"30"},{"size":88,"mtime":1607343499596,"results":"39","hashOfConfig":"30"},{"size":263,"mtime":1607344435947,"results":"40","hashOfConfig":"30"},{"size":606,"mtime":1607401486856,"results":"41","hashOfConfig":"30"},{"size":1131,"mtime":1607393402933,"results":"42","hashOfConfig":"30"},{"size":3663,"mtime":1607433363347,"results":"43","hashOfConfig":"30"},{"size":4017,"mtime":1607436229871,"results":"44","hashOfConfig":"30"},{"size":1060,"mtime":1607436084193,"results":"45","hashOfConfig":"30"},{"size":3533,"mtime":1607436385408,"results":"46","hashOfConfig":"30"},{"size":7504,"mtime":1607428541633,"results":"47","hashOfConfig":"30"},{"size":4638,"mtime":1607433436498,"results":"48","hashOfConfig":"30"},{"size":1391,"mtime":1607431298958,"results":"49","hashOfConfig":"30"},{"size":580869,"mtime":1607411660706,"results":"50","hashOfConfig":"30"},{"size":1551,"mtime":1607433938947,"results":"51","hashOfConfig":"30"},{"size":2522,"mtime":1607433348267,"results":"52","hashOfConfig":"30"},{"size":3323,"mtime":1607437773102,"results":"53","hashOfConfig":"30"},{"size":1614,"mtime":1607436244778,"results":"54","hashOfConfig":"30"},{"size":3594,"mtime":1607432931836,"results":"55","hashOfConfig":"30"},{"size":6637,"mtime":1607440815627,"results":"56","hashOfConfig":"30"},{"size":1947,"mtime":1607494805046,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1byo7du",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Work\\elemart-storage\\src\\index.tsx",[],["131","132"],"D:\\Work\\elemart-storage\\src\\reportWebVitals.ts",[],"D:\\Work\\elemart-storage\\src\\App.tsx",["133","134","135"],"import React from 'react';\nimport './App.css';\nimport { Button, Layout, Typography } from 'antd'\nimport { Pages } from './Pages';\nimport { Page } from './types/Page';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport { SideMenuWithRouter } from './components/SideMenu/SideMenu';\n\nconst { Sider, Content, Header } = Layout\nconst {Title} = Typography\nexport const App: React.FC = () => {\n  return (\n      <Layout className='main' style={{height:'100%'}} key='layout-main'>\n        <Router>        \n          <Layout className='content' > \n          <Sider className='sider'>            \n            <SideMenuWithRouter/>\n          </Sider>           \n            <Content id=\"content-main\">\n              <Switch>\n                {Pages.map((page: Page) => {\n                  return (\n                    <Route\n                      path={page.path}\n                      component={page.component}\n                      key={page.path}\n                      exact\n                    ></Route>\n                  );\n                })}\n              </Switch>\n            </Content>\n          </Layout>\n        </Router>\n      </Layout>\n  );\n}\n","D:\\Work\\elemart-storage\\src\\Pages.tsx",["136","137"],"import {Page} from './types/Page'\r\nimport {App} from './App'\r\nimport { LoginPage } from './pages/LoginPage/LoginPage'\r\nimport { ProductPage } from './pages/ProductPage/ProductPage'\r\nimport { CustomerPage } from './pages/CustomerPage/CustomerPage'\r\nimport { PaidInvoicePage } from './pages/PaidInvoicePage/PaidInvoicePage'\r\nimport { ReceivedInvoicePage } from './pages/ReceivedPage/ReceivedInvoicePage'\r\nimport { PaidInfo } from './components/PaidInfo/PaidInfo'\r\nimport { ReceivedInfo } from './components/ReceivedInfo/ReceivedInfo'\r\nimport { ProductInfo } from './components/ProductInfo/ProductInfo'\r\n\r\nexport const Pages:Page[] = [\r\n    {\r\n        title:'หน้าแรก',\r\n        component:ProductPage,\r\n        path:'/',\r\n        show:true,\r\n    },\r\n    {\r\n        title:'รายงานรับ',\r\n        component:ReceivedInvoicePage,\r\n        path:'/received',\r\n        show:true,\r\n    },\r\n    {\r\n        title:'รายงานขาย',\r\n        component:PaidInvoicePage,\r\n        path:'/paid',\r\n        show:true,\r\n    },\r\n    {\r\n        title:'Customer',\r\n        component:CustomerPage,\r\n        path:'/customer',\r\n        show:true,\r\n    },\r\n    {\r\n        title:'รายการขาย',\r\n        path:'/paid/:id',\r\n        component:PaidInfo,\r\n        show:false,\r\n    },\r\n    {\r\n        title:'รายการซื้อ',\r\n        path:'/received/:id',\r\n        component:ReceivedInfo,\r\n        show:false,\r\n    },\r\n    {\r\n        title:'สินค้า',\r\n        path:'/product/:id',\r\n        component:ProductInfo,\r\n        show:false,\r\n    }\r\n]","D:\\Work\\elemart-storage\\src\\pages\\LoginPage\\LoginPage.tsx",["138","139"],"import React, { useEffect, useState } from 'react';\r\n// import {\r\n//   IonContent,\r\n//   IonHeader,\r\n//   IonCard,\r\n//   IonCardHeader,\r\n//   IonPage,\r\n// } from '@ionic/react';\r\nimport './Login.css';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nexport const LoginPage: React.FC = () => {\r\n  const [msg, setMsg] = useState('');\r\n  // const { signIn, user } = useAuth();\r\n\r\n  const onLogin = async (values: any) => {\r\n    // setLoadingState(true);\r\n    // try {\r\n    //   const res = await signIn({\r\n    //     username: values.username,\r\n    //     password: values.password,\r\n    //   });\r\n    //   setMsg(res.msg);\r\n    // } catch {\r\n    //   console.log('Login Error');\r\n    // } finally {\r\n    //   setLoadingState(false);\r\n    // }\r\n    /*UserApi.postSignin(values)\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response.data.token) {\r\n          Cookie.set('token', response.data.token);\r\n          Cookie.set('user', JSON.stringify(response.data.user));\r\n          window.location.reload();\r\n        } else {\r\n          setMsg(response.data.msg);\r\n        }\r\n        return response;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });*/\r\n  };\r\n\r\n  return (\r\n          <Form className={'login-form'} onFinish={onLogin}>\r\n            <Form.Item\r\n              label=\"\"\r\n              name=\"username\"\r\n              rules={[{ required: true, message: 'กรุณากรอก Username' }]}\r\n            >\r\n              <Input\r\n                size=\"large\"\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Username\"\r\n                className={'uinput'}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"\"\r\n              name=\"password\"\r\n              rules={[{ required: true, message: 'กรุณากรอกรหัสผ่าน' }]}\r\n            >\r\n              <Input.Password\r\n                size=\"large\"\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Password\"\r\n                className={'uinput'}\r\n              />\r\n            </Form.Item>\r\n            <div>\r\n              <span style={{ fontSize: 16, color: 'red' }}>{msg}</span>\r\n            </div>\r\n            <Form.Item>\r\n              <Button type=\"primary\" className=\"buttonT\" htmlType=\"submit\">\r\n                Login\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n  );\r\n};\r\n",["140","141"],"D:\\Work\\elemart-storage\\src\\components\\SideMenu\\SideMenu.tsx",["142","143","144"],"import React, { useState, useEffect } from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { Page } from '../../types/Page';\r\nimport { Pages } from '../../Pages';\r\nimport { Menu,Typography } from 'antd';\r\nimport { Content, Header } from 'antd/lib/layout/layout';\r\nimport './style.css'\r\nconst {Divider } = Menu\r\nconst {Title} = Typography\r\ntype SideMenuProps = RouteComponentProps<{}>;\r\n\r\nconst SideMenu = ({ history }: SideMenuProps) => {\r\n  const [activePage, setActivePage] = useState(Pages[0].title);\r\n\r\n  const navigateToPage = (e:any,page: any) => {\r\n    history.push(page.path);\r\n    setActivePage(page.title);\r\n  };\r\n\r\n  \r\n  return (\r\n    <>\r\n    <Header className='header'>\r\n          <div>\r\n            <div className='company-title'>\r\n              <Title level={3}>ELE-MART</Title>\r\n            </div>\r\n          </div>\r\n      </Header>\r\n    <Menu \r\n      key=\"SideMenu\"\r\n      activeKey={activePage}\r\n      defaultSelectedKeys={[activePage]}\r\n      className='outside-menu'\r\n      mode=\"inline\">\r\n      {Pages.map((page: Page, index: number) => {\r\n        if(!page.show) return <></>\r\n        return (\r\n          <Menu.Item\r\n          onClick={(e) => navigateToPage(e,page)}\r\n            key={page.title}\r\n          >\r\n            <span>{page.title}</span>\r\n          </Menu.Item>\r\n        )\r\n      })}\r\n    </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SideMenuWithRouter = withRouter(SideMenu);\r\n","D:\\Work\\elemart-storage\\src\\pages\\CustomerPage\\CustomerPage.tsx",["145","146"],"import React, {useEffect,useState} from 'react'\r\nimport {Button, Input, Result, Table} from 'antd'\r\nimport { Link } from 'react-router-dom';\r\nimport { loadCustomers } from '../../services/CustomerService'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport {PlusOutlined} from '@ant-design/icons'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal';\r\nimport { CustomerForm } from '../../components/CustomerForm/CustomerForm';\r\nconst column = [\r\n    {\r\n        title:'ชื่อลูกค้า',\r\n        dataIndex:'customer_name',\r\n        key:'customerName'\r\n    },\r\n    {\r\n        title:'operation',\r\n        dataIndex:'operation',\r\n        render:(text:string,record:any)=><Link to={{ pathname: '/ReportViewer/' + record._id }}><Button key={record._id} type='primary'>ดูรายละเอียด</Button></Link>\r\n    }\r\n]\r\nexport const CustomerPage:React.FC = () => {\r\n    const [dataSource, setDataSource] = useState([])\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    \r\n    useEffect(()=>{\r\n        console.log('Effect is applied')\r\n        async function fetchCustomer() {\r\n            const response = await CustomerApi.getCustomer(20)\r\n            setDataSource(response)\r\n        }\r\n        fetchCustomer()\r\n        return () =>{            \r\n            console.log('unmount')\r\n        }\r\n    },[])\r\n    \r\n    const handleClose = (p:any) =>{\r\n        localStorage.removeItem('product')\r\n        setModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div key='customer-page'>\r\n            <div style={{marginTop:15}}>\r\n                <div style={{display:'inline-flex',marginLeft:15,alignItems:'center'}}>\r\n                    <label>ค้นหา</label>\r\n                    <Input/>\r\n                </div>\r\n                <div style={{display:'inline-block',float:'right',marginRight:15}}>\r\n                    <Button type='primary' onClick={e=>setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n                </div>\r\n            </div>\r\n            <CustomModal modalTitle='เพิ่มลูกค้า' modalType=\"customer\" modalForm={<CustomerForm/>} modalVisible={modalVisible} getClose={handleClose} />\r\n            <Table\r\n            style={{margin:'15px 15px'}}\r\n            rowKey={record => record._id}\r\n            bordered\r\n            columns={column}\r\n            dataSource={dataSource}\r\n            pagination={{\r\n                pageSize:50\r\n            }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\pages\\ProductPage\\ProductPage.tsx",["147","148","149"],"D:\\Work\\elemart-storage\\src\\api\\CustomerApi.ts",[],"D:\\Work\\elemart-storage\\src\\config.ts",[],"D:\\Work\\elemart-storage\\src\\services\\CustomerService.ts",[],"D:\\Work\\elemart-storage\\src\\components\\CustomModal\\CustomModal.tsx",["150","151","152"],"import {ReactChild, useEffect,useState} from 'react'\r\nimport {Modal} from 'antd'\r\nimport {CustomerForm} from '../CustomerForm/CustomerForm'\r\ninterface ModalProps {\r\n    modalTitle:string;\r\n    modalType:string;\r\n    modalVisible:boolean;\r\n    getClose:Function;\r\n    modalForm:ReactChild;\r\n    modalWidth?:number;\r\n}\r\nexport const CustomModal:React.FC<ModalProps> = (props) => {\r\n    return <>\r\n    <Modal key='modal-comp' visible={props.modalVisible} title={props.modalTitle} width={props.modalWidth} onCancel={e=>props.getClose(false)} footer={false}>\r\n        {props.modalForm}\r\n    </Modal>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\CustomerForm\\CustomerForm.tsx",["153"],"import {useState,useEffect} from 'react'\r\nimport {Button, Input} from 'antd'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nexport const CustomerForm:React.FC = () =>{\r\n    const [customerName, setCustomerName] = useState('')\r\n    const [showHaveAccount, setShowHaveAccount] = useState(false)\r\n    const onSave = async () =>{\r\n        const obj:any = {\r\n            customer_name :customerName\r\n        }\r\n        const res = await CustomerApi.insertCustomer(obj)\r\n        if(typeof(res.data) === 'string'){\r\n            setShowHaveAccount(true)\r\n        }else{\r\n            window.location.reload()\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <span>ชื่อลูกค้า</span>\r\n            <Input onChange={e=>setCustomerName(e.target.value)} style={{width:400,marginLeft:15}} />\r\n        </div>\r\n        <div style={{margin:'15px auto',textAlign:'center'}}>\r\n            <Button type='primary' onClick={onSave}>Submit</Button>\r\n        </div>\r\n        {showHaveAccount? <span style={{color:'red'}}>มีชื่อลูกค้ารายนี้แล้ว</span>:null}\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\pages\\PaidInvoicePage\\PaidInvoicePage.tsx",["154"],"import { PlusOutlined } from '@ant-design/icons'\r\nimport {Button, Input, Layout, Popconfirm, Table} from 'antd'\r\nimport React,{useState,useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport {PaidInvoiceForm} from '../../components/PaidInvoiceForm/PaidInvoiceForm'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal'\r\nimport {paidColumn} from '../../mocks/ColumnMocks'\r\nimport './style.css'\r\nimport { ProductApi } from '../../api/ProductApi'\r\n\r\nconst {Header} = Layout\r\n\r\nconst onCancel = (e: any) => {};\r\nconst onConfirm = (id: string) => {\r\n  PaidApi.deleteInvoiceById(id);\r\n  window.location.reload();\r\n};\r\n\r\nconst column = [\r\n    {\r\n        title:'วันที่',\r\n        dataIndex:'invoice_date',\r\n        key:'invoice_date',\r\n    },\r\n    {\r\n        title:'หมายเลข Invoice',\r\n        dataIndex:'invoice_id',\r\n        key:'invoice_id',\r\n    },\r\n    {\r\n        title:'ลูกค้า',\r\n        dataIndex:'customer_name',\r\n        key:'customer_name',\r\n    },\r\n    {\r\n        title:'Operation',\r\n        dataIndex:'operation',\r\n        key:'operation',\r\n        render:(text:string,record:any)=><>\r\n        <Link to={'/paid/'+record._id}>\r\n            <Button type='primary'>ดูรายละเอียด</Button>\r\n        </Link>\r\n            <Popconfirm\r\n            title=\"คุณต้องการลบรายงานนี้?\"\r\n            onConfirm={() => onConfirm(record._id)}\r\n            onCancel={onCancel}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button type='primary' danger style={{marginLeft:10}}>Delete</Button>\r\n          </Popconfirm>\r\n        </>\r\n    }\r\n]\r\nexport const PaidInvoicePage:React.FC = () =>{\r\n    const [dataSource, setDataSource] = useState([])\r\n    const [modalVisible,setModalVisible] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        console.log('Effect is applied')\r\n        async function fetchPaidInvoice() {\r\n            const response = await PaidApi.getPaidInvoice(50)\r\n            setDataSource(response)\r\n        }\r\n        fetchPaidInvoice()\r\n        return () =>{            \r\n            console.log('unmount')\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if(modalVisible){\r\n                const response = await ProductApi.getAllProduct()\r\n                localStorage.setItem('product',JSON.stringify(response))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [modalVisible])\r\n    \r\n    const handleClose = (p:any) =>{\r\n        setModalVisible(false)\r\n        localStorage.removeItem('product')\r\n    }\r\n\r\n    return <div key='invoice-page' className={'invoice-page'}>\r\n    <div style={{marginTop:15}}>\r\n        <div style={{display:'inline-flex',marginLeft:15,alignItems:'center'}}>\r\n            <label>ค้นหา</label>\r\n            <Input/>\r\n        </div>\r\n        <div style={{display:'inline-block',float:'right',marginRight:15}}>\r\n            <Button type='primary' onClick={e=>setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n        </div>\r\n    </div>\r\n    <CustomModal modalTitle='รายการขาย' modalType=\"paid-invoice\" modalForm={<PaidInvoiceForm column={paidColumn}/>} modalWidth={1400} modalVisible={modalVisible} getClose={handleClose} />\r\n    <Table\r\n    style={{margin:'15px 15px'}}\r\n    rowKey={record => record._id}\r\n    bordered\r\n    columns={column}\r\n    dataSource={dataSource}\r\n    pagination={{\r\n        pageSize:50\r\n    }}\r\n    />\r\n</div>\r\n}","D:\\Work\\elemart-storage\\src\\pages\\ReceivedPage\\ReceivedInvoicePage.tsx",["155","156"],"import { PlusOutlined } from '@ant-design/icons'\r\nimport { Input, Button, Table, Popconfirm } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal'\r\nimport { PaidInvoiceForm } from '../../components/PaidInvoiceForm/PaidInvoiceForm'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { ReceivedInvoiceForm } from '../../components/ReceivedInvoiceForm/ReceivedInvoiceForm'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { receivedColumn } from '../../mocks/ColumnMocks'\r\n\r\nconst onCancel = (e: any) => { };\r\nconst onConfirm = (id: string) => {\r\n    ReceivedApi.deleteReceivedInvoiceById(id);\r\n    window.location.reload();\r\n};\r\n\r\n\r\n\r\nconst column = [\r\n    {\r\n        title: 'วันที่',\r\n        dataIndex: 'invoice_date',\r\n        key: 'invoice_date',\r\n    },\r\n    {\r\n        title: 'หมายเลข Invoice',\r\n        dataIndex: 'invoice_id',\r\n        key: 'invoice_id',\r\n    },\r\n    {\r\n        title: 'ผู้ขาย',\r\n        dataIndex: 'seller',\r\n        key: 'seller',\r\n    },\r\n    {\r\n        title: 'Operation',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        render: (text: string, record: any) => <>\r\n            <Link to={'/received/' + record._id}>\r\n                <Button type='primary'>ดูรายละเอียด</Button>\r\n            </Link>\r\n            <Popconfirm\r\n                title=\"คุณต้องการลบรายงานนี้?\"\r\n                onConfirm={() => onConfirm(record._id)}\r\n                onCancel={onCancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' danger style={{ marginLeft: 10 }}>Delete</Button>\r\n            </Popconfirm>\r\n        </>\r\n    }\r\n]\r\nexport const ReceivedInvoicePage: React.FC = () => {\r\n    const [dataSource, setDataSource] = useState([])\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('Effect is applied')\r\n        async function fetchPaidInvoice() {\r\n            const response = await ReceivedApi.getAllReceivedInvoice()\r\n            setDataSource(response)\r\n        }\r\n        fetchPaidInvoice()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if(modalVisible){\r\n                const response = await ProductApi.getAllProduct()\r\n                localStorage.setItem('product',JSON.stringify(response))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [modalVisible])\r\n\r\n    const handleClose = (p: any) => {\r\n        localStorage.removeItem('product')\r\n        setModalVisible(false)\r\n    }\r\n\r\n    return <div key='invoice-page' className={'invoice-page'}>\r\n        <div style={{ marginTop: 15 }}>\r\n            <div style={{ display: 'inline-flex', marginLeft: 15, alignItems: 'center' }}>\r\n                <label>ค้นหา</label>\r\n                <Input />\r\n            </div>\r\n            <div style={{ display: 'inline-block', float: 'right', marginRight: 15 }}>\r\n                <Button type='primary' onClick={e => setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n            </div>\r\n        </div>\r\n        <CustomModal modalTitle='รายการซื้อ' modalType=\"received-invoice\" modalForm={<ReceivedInvoiceForm column={receivedColumn} />} modalWidth={1400} modalVisible={modalVisible} getClose={handleClose} />\r\n        <Table\r\n            style={{ margin: '15px 15px' }}\r\n            rowKey={record => record._id}\r\n            bordered\r\n            columns={column}\r\n            dataSource={dataSource}\r\n            pagination={{\r\n                pageSize: 50\r\n            }}            \r\n        />\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\api\\PaidApi.ts",[],"D:\\Work\\elemart-storage\\src\\components\\PaidInvoiceForm\\PaidInvoiceForm.tsx",["157"],"\r\nimport { Button, DatePicker, Input, Select } from 'antd'\r\nimport {useEffect,useState} from 'react'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport {EditableTable} from '../EditTable/EditableTable'\r\n\r\ninterface TableProps {\r\n    column:Array<Object>\r\n}\r\n\r\nexport const PaidInvoiceForm:React.FC<TableProps> = props => {\r\n    const [dataTable, setdataTable] = useState([] as Array<Object>)\r\n    const [invoice, setInvoice] = useState('')\r\n    const [customer, setCustomer] = useState('')\r\n    const [customers, setCustomers] = useState([] as Array<Object>)\r\n    const [dateData, setDateData] = useState('')\r\n\r\n    useEffect(()=>{\r\n        async function fetchAllCustomer() {\r\n            const response = await CustomerApi.getAllCustomer()\r\n            setCustomers(response)\r\n        }\r\n        fetchAllCustomer()\r\n        return () =>{            \r\n            console.log('unmount')\r\n        }\r\n    },[])\r\n\r\n    const getTableData = (data:Array<Object>) => {\r\n        setdataTable(data)\r\n    }\r\n\r\n    const onSave = async () =>{\r\n        const getProduct = localStorage.getItem('product')\r\n        const allData = {\r\n            invoice_date:dateData,\r\n            invoice_id:'IV'+invoice,\r\n            customer_name:customer,\r\n            data_table:dataTable,\r\n        }\r\n        const id = await PaidApi.insertInvoice(allData).then(res=>{\r\n            return res._id\r\n        })\r\n        if(getProduct !== null){\r\n            const p = JSON.parse(getProduct)\r\n            dataTable.map((data:any,index:number)=>{\r\n                const filterData = p.filter((pFilter:any) => pFilter._id === data.raw_id)[0]\r\n                filterData.current_amount -= data.paid_amount\r\n                filterData.history_table.push(id)\r\n                ProductApi.updateProductById(data.raw_id,filterData).then(res=>{\r\n                    window.location.reload()\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='paid-content'>\r\n            <div className='paid-form date-form'>\r\n                <span>วันที่</span>\r\n                <div>\r\n                    <DatePicker format='DD/MM/YYYY' className={'input-width'} onChange={(date,dateString) =>setDateData(dateString)} />\r\n                </div>                \r\n            </div>\r\n            <div className='paid-form invoice-form'>\r\n                <span>หมายเลข Invoice</span>\r\n                <div>\r\n                    <Input addonBefore='IV' className={'input-width'} onChange={e=>setInvoice(e.target.value)} />\r\n                </div>                \r\n            </div>\r\n            <div className='paid-form customer-form'>\r\n                <span>ลูกค้า</span>\r\n                <div>\r\n                    <Select className={'input-width'} showSearch onChange={e=>setCustomer(e.toString())}>\r\n                        {customers.map((data:any)=>{\r\n                            return <Select.Option key={data._id} value={data.customer_name}>{data.customer_name}</Select.Option>\r\n                        })}\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            <div className='paid-form editable-table'>\r\n                <EditableTable column={props.column} getData={getTableData} />\r\n            </div>\r\n            <div >\r\n                <Button type='primary' onClick={onSave}>บันทึก</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableCell.tsx",["158","159"],"import React, { useContext, useState, useEffect, createRef } from 'react';\r\nimport { Select, TimePicker, Form, DatePicker, Radio, Input, InputNumber } from 'antd';\r\nimport moment from 'moment';\r\nimport TH_LOCAL from 'antd/es/date-picker/locale/th_TH';\r\nimport { ProductApi } from '../../api/ProductApi';\r\n\r\ninterface EditableRowProps {\r\n  index: number;\r\n  d: any;\r\n}\r\n\r\ninterface Item {\r\n  product: string;\r\n}\r\n\r\ninterface EditableCellProps {\r\n  title: React.ReactNode;\r\n  editable: boolean;\r\n  children: React.ReactNode;\r\n  dataIndex: string;\r\n  dataType: string;\r\n  tableType: string;\r\n  record: any;\r\n  handleSave: (record: Item) => void;\r\n  handleDelete: (record: Item) => void;\r\n}\r\n\r\nconst EditableContext = React.createContext<any>(null);\r\n\r\nexport const EditableRow: React.FC<EditableRowProps> = ({\r\n  index,\r\n  ...props\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\nexport const EditableCell: React.FC<EditableCellProps> = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  dataType,\r\n  tableType,\r\n  record,\r\n  handleSave,\r\n  handleDelete,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [product, setProduct] = useState([] as Array<Object>)\r\n  const inputRef = createRef<Input>();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  useEffect(() => { \r\n    console.log('Effect is applied')\r\n      const getProduct = localStorage.getItem('product')\r\n      if(getProduct !== null)\r\n        setProduct(JSON.parse(getProduct))\r\n        return () =>{            \r\n            console.log('unmount')\r\n        }\r\n  }, []);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    if (record[dataIndex] !== '-') {\r\n      if (dataType === 'date') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'DD/MM/YYYY'),\r\n        });\r\n      } else if (dataType === 'date_time') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'DD/MM/YYYY HH:mm'),\r\n        });\r\n      } else if (dataType === 'time') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'HH:mm'),\r\n        });\r\n      } else {\r\n        form.setFieldsValue({ [dataIndex]: record[dataIndex] });\r\n      }\r\n    }\r\n  };\r\n\r\n  const save = async (e: any) => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      const getKey = Object.keys(values)[0];\r\n      if (values[getKey] === undefined || values[getKey] === '') {\r\n        values[getKey] = '-';\r\n      }\r\n      if (dataType === 'date') {\r\n        values[dataIndex] = values[dataIndex]\r\n          .format('DD/MM/YYYY')\r\n          .split('T')[0];\r\n      } else if (dataType === 'date_time') {\r\n        values[dataIndex] = values[dataIndex]\r\n          .format('DD/MM/YYYY HH:mm')\r\n          .split('T')[0];\r\n      } else if (dataType === 'time') {\r\n        values[dataIndex] = values[dataIndex].format('HH:mm');\r\n      }\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n  if (editable) {\r\n    if (editing) {\r\n      if (dataType === 'radio') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            {dataIndex === 'fruit_size' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"ใหญ่\">ใหญ่</Radio>\r\n                <Radio value=\"กลาง\">กลาง</Radio>\r\n                <Radio value=\"เล็ก\">เล็ก</Radio>\r\n                <Radio value=\"ชิ้น\">ชิ้น</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'status' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"สด\">สด</Radio>\r\n                <Radio value=\"เปลี่ยนมุ้ง\">เปลี่ยนมุ้ง</Radio>\r\n                <Radio value=\"คลุก\">คลุก</Radio>\r\n                <Radio value=\"อบใหม่\">อบใหม่</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'soaking_type' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"บ่อแช่\">บ่อแช่</Radio>\r\n                <Radio value=\"ถัง\">ถัง</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'fruit_path' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"NORMAL\">Normal</Radio>\r\n                <Radio value=\"SOFT\">SOFT</Radio>\r\n                <Radio value=\"FREE SUGAR\">FREE SUGAR</Radio>\r\n                <Radio value=\"FREE SO2\">FREE SO2</Radio>\r\n              </Radio.Group>\r\n            ) : (\r\n                      <Radio.Group onChange={save}>\r\n                        <Radio value=\"ผ่าน\">ผ่าน</Radio>\r\n                        <Radio value=\"ไม่ผ่าน\">ไม่ผ่าน</Radio>\r\n                      </Radio.Group>\r\n                    )}\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'date') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <DatePicker onBlur={save} format={'DD/MM/YYYY'} locale={TH_LOCAL} />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'date_time') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <DatePicker\r\n              onBlur={save}\r\n              showTime\r\n              format={'DD/MM/YYYY HH:mm'}\r\n              locale={TH_LOCAL}\r\n            />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'time') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <TimePicker onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'select') {\r\n        childNode = (\r\n          <Form.Item\r\n            style={{ margin: 0 }}\r\n            name={dataIndex}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `${title} is required.`,\r\n              },\r\n            ]}\r\n          >\r\n            {dataIndex ==='product_name'?(\r\n              <Select onBlur={save} showSearch>\r\n                {product.map((data:any)=>{\r\n                  return <Select.Option key={data._id} value={data.product_name}>{data.product_name}</Select.Option>                  \r\n                })}\r\n              </Select>\r\n            ):null}\r\n          </Form.Item>\r\n        );\r\n      } else if(dataType === 'number'){\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <InputNumber min={0} ref={inputRef} onPressEnter={save} onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      } else {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      }\r\n    } else {\r\n      childNode = (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{ paddingRight: 24 }}\r\n          onClick={toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableTable.tsx",["160","161"],"import { useEffect, useState } from 'react'\r\nimport { Button, Table, Popconfirm } from 'antd'\r\nimport {\r\n    EditableCell,\r\n    EditableRow,\r\n} from './EditableCell';\r\n\r\ninterface TableProps {\r\n    column: Array<Object>;\r\n    getData: Function;\r\n}\r\n\r\nexport const EditableTable: React.FC<TableProps> = props => {\r\n    const [dataSources, setDataSource] = useState([] as Array<{}>)\r\n    const [count, setCount] = useState(1)\r\n\r\n    useEffect(()=>{\r\n        dataSources.map((data: any,index:number) => {\r\n            data.key = index+1\r\n            handleOperation(data);\r\n            return data;\r\n          });\r\n          console.log(dataSources)\r\n        if(props.getData!==undefined) props.getData(dataSources)\r\n    },[dataSources])\r\n\r\n    const handleOperation = (data: any) => {\r\n          data.operation = (\r\n            <Popconfirm\r\n              title=\"Sure to delete?\"\r\n              onConfirm={() => handleDelete(data.key)}\r\n            >\r\n              <a style={{ color: 'red' }}>Delete</a>\r\n            </Popconfirm>\r\n          );\r\n        return data\r\n    };\r\n\r\n    const handleDelete = (key: number) => {\r\n        setDataSource(dataSources.filter((item: any) => item.key !== key));\r\n        setCount(count-1)\r\n    };\r\n\r\n    const handleSave = (row: any) => {\r\n        const getAllProduct = localStorage.getItem('product')\r\n        if(getAllProduct !== null){\r\n            const allProductData = JSON.parse(getAllProduct)\r\n            if(row.product_name !== '-') {\r\n                const filterData = allProductData.filter((data:any)=>data.product_name === row.product_name)[0]\r\n                row.raw_id = filterData._id\r\n                row.product_id = filterData.product_id\r\n            }\r\n        }\r\n        if(row.received_amount) row.total_price = row.received_amount * row.product_price\r\n        if(row.paid_amount) row.total_price = row.paid_amount * row.product_price\r\n        const newData = [...dataSources];\r\n        const index = newData.findIndex((item: any) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n            ...item,\r\n            ...row,\r\n        });\r\n        setDataSource(newData);\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n\r\n    const mapColumns = (col: any) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n        const newCol = {\r\n            ...col,\r\n            onCell: (record: any) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                children: col.children,\r\n                dataType: col.dataType,\r\n                handleSave,\r\n            }),\r\n        };\r\n        if (col.children) {\r\n            newCol.children = col.children.map(mapColumns);\r\n        }\r\n        return newCol;\r\n    };\r\n    const canEditChildColumns = props.column.map(mapColumns);\r\n    const handleAdd = () => {\r\n        const storeData = {};\r\n        props.column.forEach((data: any) => {\r\n            if (data.children) {\r\n                data.children.forEach((insideChildren: any) => {\r\n                    if (insideChildren.dataType === 'number') {\r\n                        Object.assign(storeData, { [insideChildren.dataIndex]: 0 });\r\n                    } else {\r\n                        Object.assign(storeData, { [insideChildren.dataIndex]: '-' });\r\n                    }\r\n                });\r\n            } else {\r\n                if (data.dataType === 'number') {\r\n                    Object.assign(storeData, { [data.dataIndex]: 0 });\r\n                }else if(data.dataType === 'action'){\r\n\r\n                } else {\r\n                    Object.assign(storeData, { [data.dataIndex]: '-' });\r\n                    Object.assign(storeData, { key: count });\r\n                }\r\n            }\r\n        });\r\n        const newData = {\r\n            key: count,\r\n            ...storeData,\r\n        };\r\n        setCount(count + 1);\r\n        setDataSource([...dataSources, newData]);\r\n    }\r\n    const AddBtn = () => {\r\n        return (\r\n            <Button onClick={handleAdd} style={{ marginBottom: 16 }} type='primary'>\r\n                Add row\r\n            </Button>\r\n        );\r\n    };\r\n    return <div>\r\n        <AddBtn />\r\n        <Table\r\n            scroll={{ x: 'max-content', y: '100%' }}\r\n            columns={canEditChildColumns}\r\n            dataSource={dataSources}\r\n            components={components}\r\n            bordered\r\n            size=\"small\"\r\n            style={{width:1300}}\r\n        />\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\api\\ReceivedApi.ts",[],"D:\\Work\\elemart-storage\\src\\mocks\\ProductMocks.ts",[],"D:\\Work\\elemart-storage\\src\\api\\ProductApi.ts",[],"D:\\Work\\elemart-storage\\src\\components\\PaidInfo\\PaidInfo.tsx",[],"D:\\Work\\elemart-storage\\src\\mocks\\ColumnMocks.ts",[],"D:\\Work\\elemart-storage\\src\\components\\ReceivedInfo\\ReceivedInfo.tsx",["162"],"import { Table, Card, Descriptions } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { receivedColumn } from '../../mocks/ColumnMocks'\r\nimport './style.css'\r\ninterface ReceivedProps {\r\n    createdDate: Date\r\n    seller: string\r\n    data_table: Array<Object>\r\n    invoice_date: string\r\n    invoice_id: string\r\n    updateDate: Date\r\n    _id: string\r\n}\r\nexport const ReceivedInfo: React.FC<{ match: any }> = ({ match }) => {\r\n    const [dataSource, setDataSource] = useState({} as ReceivedProps)\r\n    useEffect(() => {\r\n        const { id } = match.params;\r\n        const getPaidFromId = async (id: string) => {\r\n            const res = await ReceivedApi.getReceivedInvoiceById(id)\r\n            setDataSource(res[0])\r\n        }\r\n        getPaidFromId(id.toString())\r\n        return () => {\r\n\r\n        }\r\n    }, [match])\r\n\r\n    return <>\r\n        <div className='paid-content'>\r\n            <Card>\r\n                <Descriptions title={`${dataSource.invoice_id}`} layout=\"vertical\" bordered>\r\n                    <Descriptions.Item label='วันที่'>{dataSource.invoice_date}</Descriptions.Item>\r\n                    <Descriptions.Item label='ลูกค้า'>{dataSource.seller}</Descriptions.Item>\r\n                </Descriptions>\r\n                <div className='paid-form editable-table'>\r\n                    <Table columns={receivedColumn} dataSource={dataSource.data_table} bordered pagination={false} />\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\ReceivedInvoiceForm\\ReceivedInvoiceForm.tsx",["163","164"],"\r\nimport { Button, DatePicker, Input, Select } from 'antd'\r\nimport {useEffect,useState} from 'react'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport {EditableTable} from '../EditTable/EditableTable'\r\n\r\ninterface TableProps {\r\n    column:Array<Object>\r\n}\r\n\r\nexport const ReceivedInvoiceForm:React.FC<TableProps> = props => {\r\n    const [dataTable, setdataTable] = useState([] as Array<Object>)\r\n    const [invoice, setInvoice] = useState('')\r\n    const [seller, setSeller] = useState('')\r\n    const [customers, setCustomers] = useState([] as Array<Object>)\r\n    const [dateData, setDateData] = useState('')\r\n\r\n    useEffect(()=>{\r\n        async function fetchAllCustomer() {\r\n            const response = await CustomerApi.getAllCustomer()\r\n            setCustomers(response)\r\n        }\r\n        fetchAllCustomer()\r\n        return () =>{            \r\n            console.log('unmount')\r\n        }\r\n    },[])\r\n    \r\n    const getTableData = (data:Array<Object>) => {\r\n        setdataTable(data)\r\n    }\r\n\r\n    const onSave = async () =>{\r\n        const getProduct = localStorage.getItem('product')\r\n        const allData = {\r\n            invoice_date:dateData,\r\n            invoice_id:'AP'+invoice,\r\n            seller:seller,\r\n            data_table:dataTable,\r\n        }\r\n        const id = await ReceivedApi.insertReceivedInvoice(allData).then(res=>{\r\n            return res._id\r\n        })\r\n        if(getProduct !== null){\r\n            const p = JSON.parse(getProduct)\r\n            dataTable.map((data:any,index:number)=>{\r\n                const filterData = p.filter((pFilter:any) => pFilter._id === data.raw_id)[0]\r\n                filterData.current_amount += data.received_amount\r\n                filterData.history_table.push(id)\r\n                ProductApi.updateProductById(data.raw_id,filterData).then(res=>{\r\n                    window.location.reload()\r\n                })\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='paid-content'>\r\n            <div className='paid-form date-form'>\r\n                <span>วันที่</span>\r\n                <div>\r\n                    <DatePicker format='DD/MM/YYYY' className={'input-width'} onChange={(date,dateString) =>setDateData(dateString)} />\r\n                </div>                \r\n            </div>\r\n            <div className='paid-form invoice-form'>\r\n                <span>หมายเลข Invoice</span>\r\n                <div>\r\n                    <Input addonBefore='AP' className={'input-width'} onChange={e=>setInvoice(e.target.value)} />\r\n                </div>                \r\n            </div>\r\n            <div className='paid-form customer-form'>\r\n                <span>ผู้ขาย</span>\r\n                <div>\r\n                    <Select className={'input-width'} onChange={e=>setSeller(e.toString())}>\r\n                        {customers.map((data:any)=>{\r\n                            return <Select.Option key={data._id} value={data.customer_name}>{data.customer_name}</Select.Option>\r\n                        })}\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            <div className='paid-form editable-table'>\r\n                <EditableTable column={props.column} getData={getTableData} />\r\n            </div>\r\n            <div >\r\n                <Button type='primary' onClick={onSave}>บันทึก</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\components\\ProductInfo\\ProductInfo.tsx",["165","166","167","168"],"import { Table, Card, Descriptions } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { productDetailColumn } from '../../mocks/ColumnMocks'\r\nimport './style.css'\r\ninterface ProductProps {\r\n    createdDate: Date\r\n    product_id: string\r\n    product_name: string\r\n    history_table: Array<string>\r\n    current_amount: number\r\n    updateDate: Date\r\n    raw_id: string\r\n}\r\nexport const ProductInfo: React.FC<{ match: any }> = ({ match }) => {\r\n    const [dataSource, setDataSource] = useState([] as Array<Object>)\r\n    const [storeFetchData, setStoreFetchData] = useState([] as Array<Object>)\r\n    const [productData, setProductData] = useState({} as ProductProps)\r\n    const [productID, setProductID]= useState('')\r\n    useEffect(() => {       \r\n        const { id } = match.params;\r\n        console.log(id)\r\n        const getProductFromId = async (id: string) => {\r\n            const res = await ProductApi.getProductById(id)\r\n            console.log(res)\r\n            setProductData(res[0])\r\n        }\r\n        getProductFromId(id)\r\n        setProductID(id)\r\n        return () => {\r\n\r\n        }\r\n    }, [match])\r\n\r\n    useEffect(() => {\r\n        if(productData.history_table !== undefined){\r\n            const len = productData.history_table.length\r\n            if(productData.history_table.length>0){\r\n                const storeData:object[] = []\r\n                const fetchPaid = async (id:string,index:number) =>{\r\n                    const res = await PaidApi.getPaidInvoiceById(id).then(re=>{\r\n                        \r\n                        if(re.length>0) storeData.push(re[0])\r\n                        return storeData\r\n                    })\r\n                    if(index+1 === productData.history_table.length){\r\n                        // setStoreFetchData(res)\r\n                        return res\r\n                    } \r\n                }\r\n                const fetchReceived = async (id:string,index:number) =>{\r\n                    const res = await ReceivedApi.getReceivedInvoiceById(id).then(re=>{\r\n                        if(re.length>0)  storeData.push(re[0])\r\n                        return storeData\r\n                    })\r\n                    if(index+1 === productData.history_table.length){\r\n                        // setStoreFetchData(res)\r\n                        return res\r\n                    }\r\n                }\r\n                const ts = async() =>{\r\n                    const t:any[] = []\r\n                    await productData.history_table.map( async(id:string,index:number)=>{\r\n                        const re = await fetchPaid(id,index)\r\n                        const re2 =  await fetchReceived(id,index)\r\n                        if(re2 !== undefined && re2.length === len && re!== undefined && re.length === len ){\r\n                            setStoreFetchData(re2)\r\n                        }\r\n                        return re2             \r\n                    })\r\n                }\r\n                ts()\r\n            }\r\n        }        \r\n        return () => {\r\n            \r\n        }\r\n    }, [productData])\r\n\r\n    useEffect(()=>{\r\n            const store:any[] = []\r\n            storeFetchData.map((data:any)=>{\r\n                const storeObj:any = {}\r\n                if(data.seller !== undefined){\r\n                    Object.assign(storeObj,{invoice_date:data.invoice_date,invoice_id:data.invoice_id,seller:data.seller})\r\n                }else{\r\n                    Object.assign(storeObj,{invoice_date:data.invoice_date,invoice_id:data.invoice_id,customer_name:data.customer_name})\r\n                }\r\n                data.data_table.map((inTable:any)=>{\r\n                    if(productID === inTable.raw_id){\r\n                        if(inTable.received_amount !== undefined){\r\n                            Object.assign(storeObj,{product_price:inTable.product_price,received_amount:inTable.received_amount,paid_amount:0,total_price:inTable.total_price})\r\n                        }else{\r\n                            Object.assign(storeObj,{product_price:inTable.product_price,received_amount:0,paid_amount:inTable.paid_amount,total_price:inTable.total_price})\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n                store.push(storeObj)\r\n            })\r\n            setDataSource(store)        \r\n    },[storeFetchData])\r\n\r\n    const summaryData = (pageData: any) => {\r\n        let total = 0;\r\n        let buy = 0\r\n        let paid = 0\r\n          pageData.forEach((data: any) => {\r\n              buy += data.received_amount\r\n              paid += data.paid_amount\r\n              if(data.paid_amount > 0){\r\n                total += Number.parseFloat(data.total_price);\r\n              }else if(data.received_amount >0){\r\n                total -= Number.parseFloat(data.total_price);\r\n              }\r\n          });\r\n          return (\r\n            <>\r\n              <Table.Summary.Row>\r\n                <Table.Summary.Cell index={0}></Table.Summary.Cell>\r\n                <Table.Summary.Cell index={1}>คงเหลือ</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={2}>{buy+' - '+paid+' = '+(buy-paid)}</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={3}>{}</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={4}>Total</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={5} className='' >{total}</Table.Summary.Cell>\r\n              </Table.Summary.Row>\r\n            </>\r\n          );        \r\n      };\r\n\r\n    return <>\r\n        <div className='paid-content'>\r\n            <Card>\r\n                <Descriptions title={`${productData.product_id} : ${productData.product_name}`} layout=\"vertical\" bordered>\r\n                    <Descriptions.Item label='จำนวนคงเหลือ'>{productData.current_amount}</Descriptions.Item>\r\n                </Descriptions>\r\n                <div className='paid-form editable-table'>\r\n                    <Table \r\n                        rowKey={(record:any) => record.invoice_id}\r\n                        columns={productDetailColumn} \r\n                        dataSource={dataSource} \r\n                        bordered \r\n                        pagination={false}\r\n                        summary={tableData=>summaryData(tableData)}\r\n                        rowClassName={(record:any, index:any) => (record.received_amount > 0 ? \"red\" : \"green\")}\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\ProductForm\\ProductForm.tsx",["169","170","171","172","173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":16},{"ruleId":"179","severity":1,"message":"183","line":9,"column":25,"nodeType":"181","messageId":"182","endLine":9,"endColumn":31},{"ruleId":"179","severity":1,"message":"184","line":10,"column":8,"nodeType":"181","messageId":"182","endLine":10,"endColumn":13},{"ruleId":"179","severity":1,"message":"185","line":2,"column":9,"nodeType":"181","messageId":"182","endLine":2,"endColumn":12},{"ruleId":"179","severity":1,"message":"186","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":19},{"ruleId":"179","severity":1,"message":"187","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":26},{"ruleId":"179","severity":1,"message":"188","line":13,"column":15,"nodeType":"181","messageId":"182","endLine":13,"endColumn":21},{"ruleId":"175","replacedBy":"189"},{"ruleId":"177","replacedBy":"190"},{"ruleId":"179","severity":1,"message":"187","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},{"ruleId":"179","severity":1,"message":"191","line":6,"column":10,"nodeType":"181","messageId":"182","endLine":6,"endColumn":17},{"ruleId":"179","severity":1,"message":"192","line":8,"column":8,"nodeType":"181","messageId":"182","endLine":8,"endColumn":15},{"ruleId":"179","severity":1,"message":"193","line":2,"column":24,"nodeType":"181","messageId":"182","endLine":2,"endColumn":30},{"ruleId":"179","severity":1,"message":"194","line":4,"column":10,"nodeType":"181","messageId":"182","endLine":4,"endColumn":23},{"ruleId":"179","severity":1,"message":"195","line":2,"column":32,"nodeType":"181","messageId":"182","endLine":2,"endColumn":42},{"ruleId":"179","severity":1,"message":"196","line":8,"column":10,"nodeType":"181","messageId":"182","endLine":8,"endColumn":22},{"ruleId":"179","severity":1,"message":"183","line":10,"column":8,"nodeType":"181","messageId":"182","endLine":10,"endColumn":14},{"ruleId":"179","severity":1,"message":"187","line":1,"column":21,"nodeType":"181","messageId":"182","endLine":1,"endColumn":30},{"ruleId":"179","severity":1,"message":"197","line":1,"column":31,"nodeType":"181","messageId":"182","endLine":1,"endColumn":39},{"ruleId":"179","severity":1,"message":"198","line":3,"column":9,"nodeType":"181","messageId":"182","endLine":3,"endColumn":21},{"ruleId":"179","severity":1,"message":"187","line":1,"column":18,"nodeType":"181","messageId":"182","endLine":1,"endColumn":27},{"ruleId":"179","severity":1,"message":"183","line":12,"column":8,"nodeType":"181","messageId":"182","endLine":12,"endColumn":14},{"ruleId":"179","severity":1,"message":"199","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":17},{"ruleId":"179","severity":1,"message":"200","line":7,"column":10,"nodeType":"181","messageId":"182","endLine":7,"endColumn":25},{"ruleId":"201","severity":1,"message":"202","line":48,"column":50,"nodeType":"203","messageId":"204","endLine":48,"endColumn":52},{"ruleId":"179","severity":1,"message":"205","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":20},{"ruleId":"206","severity":1,"message":"207","line":63,"column":6,"nodeType":"208","endLine":63,"endColumn":15,"suggestions":"209"},{"ruleId":"206","severity":1,"message":"210","line":25,"column":7,"nodeType":"208","endLine":25,"endColumn":20,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":33,"column":15,"nodeType":"214","endLine":33,"endColumn":43},{"ruleId":"179","severity":1,"message":"199","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":17},{"ruleId":"179","severity":1,"message":"199","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":17},{"ruleId":"201","severity":1,"message":"202","line":49,"column":50,"nodeType":"203","messageId":"204","endLine":49,"endColumn":52},{"ruleId":"179","severity":1,"message":"215","line":64,"column":27,"nodeType":"181","messageId":"182","endLine":64,"endColumn":34},{"ruleId":"201","severity":1,"message":"202","line":84,"column":42,"nodeType":"203","messageId":"204","endLine":84,"endColumn":44},{"ruleId":"201","severity":1,"message":"202","line":91,"column":50,"nodeType":"203","messageId":"204","endLine":91,"endColumn":52},{"ruleId":"206","severity":1,"message":"216","line":104,"column":7,"nodeType":"208","endLine":104,"endColumn":23,"suggestions":"217"},{"ruleId":"179","severity":1,"message":"218","line":2,"column":18,"nodeType":"181","messageId":"182","endLine":2,"endColumn":28},{"ruleId":"179","severity":1,"message":"219","line":2,"column":50,"nodeType":"181","messageId":"182","endLine":2,"endColumn":56},{"ruleId":"179","severity":1,"message":"187","line":3,"column":9,"nodeType":"181","messageId":"182","endLine":3,"endColumn":18},{"ruleId":"179","severity":1,"message":"220","line":4,"column":10,"nodeType":"181","messageId":"182","endLine":4,"endColumn":21},{"ruleId":"179","severity":1,"message":"199","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":17},{"ruleId":"179","severity":1,"message":"221","line":7,"column":9,"nodeType":"181","messageId":"182","endLine":7,"endColumn":22},"no-native-reassign",["222"],"no-negated-in-lhs",["223"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Header' is assigned a value but never used.","'Title' is assigned a value but never used.","'App' is defined but never used.","'LoginPage' is defined but never used.","'useEffect' is defined but never used.","'setMsg' is assigned a value but never used.",["222"],["223"],"'Content' is defined but never used.","'Divider' is assigned a value but never used.","'Result' is defined but never used.","'loadCustomers' is defined but never used.","'Popconfirm' is defined but never used.","'productMocks' is defined but never used.","'useState' is defined but never used.","'CustomerForm' is defined but never used.","'PaidApi' is defined but never used.","'PaidInvoiceForm' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ProductApi' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'inputRef'. Either include it or remove the dependency array.","ArrayExpression",["224"],"React Hook useEffect has missing dependencies: 'handleOperation' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["225"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'t' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'productID'. Either include it or remove the dependency array.",["226"],"'DatePicker' is defined but never used.","'Select' is defined but never used.","'CustomerApi' is defined but never used.","'EditableTable' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [editing, inputRef]",{"range":"233","text":"234"},"Update the dependencies array to be: [dataSources, handleOperation, props]",{"range":"235","text":"236"},"Update the dependencies array to be: [productID, storeFetchData]",{"range":"237","text":"238"},[1550,1559],"[editing, inputRef]",[720,733],"[dataSources, handleOperation, props]",[4485,4501],"[productID, storeFetchData]"]